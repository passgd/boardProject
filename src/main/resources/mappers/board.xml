<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kosa.pro7.mappers.BoardDAO">

	<sql id="pagingBefore"> 
		select  O.* from (
			select rownum nrow, b.* from (
	</sql>				

	<sql id="pagingAfter"> 
			) b 
			where rownum &lt;= #{endNo}
		) O
		where nrow between #{startNo} and #{endNo}
	</sql>	
	
	<select id="getBoardList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		<include refid="pagingBefore"/>
		    select 
		        a.* 
		    from board a

			<!-- 검색 조건 설정 하는 부분  -->
			<if test="searchTitle != '' and searchTitle != null">
				where title like concat(concat('%', #{searchTitle}), '%')
			</if>   
		
			order by boardid desc
					 
		<include refid="pagingAfter"/>
		
	</select>

	<select id="boardAllList" resultType="BoardDTO">
		select 
			boardid
			, title
			, email
			, reg_date
			, view_count 
		from board 
		order by boardid desc
	</select>
	
	<select id="totalCount" resultType="int">
	    SELECT COUNT(*)
	    FROM board
	    <where>
	        <if test="searchTitle != null and !searchTitle.isEmpty()">
	            AND boardid LIKE CONCAT('%', #{searchTitle}, '%')
	        </if>
	    </where>
	</select>
	
	<select id="view" resultType="BoardDTO" >
		select 
			  boardid
			, title
			, contents
			, email
			, reg_date
			, view_count 
		from board 
		where boardid = #{boardid}
	</select>
	
	<insert id="insert" >
		<selectKey keyProperty="boardid" resultType="int"  order="BEFORE">
			select 
				seq_board.nextval boardid 
			from dual
		</selectKey>
		INSERT INTO board (
			  pid
			, boardid
			, title
			, contents
			, email
			, reg_date
		) VALUES (
			  0
			, #{boardid}
			, #{title}
			, #{contents}
			, #{email}
			, sysdate
		)
	</insert>
	
<!-- 	<insert id="insertBoardReply" > -->
<!-- 		<selectKey keyProperty="boardid" resultType="int"  order="BEFORE"> -->
<!-- 			select  -->
<!-- 				seq_board.nextval boardid  -->
<!-- 			from dual -->
<!-- 		</selectKey> -->
<!-- 		INSERT INTO board ( -->
<!-- 			  pid -->
<!-- 			, boardid -->
<!-- 			, title -->
<!-- 			, contents -->
<!-- 			, writer_uid -->
<!-- 			, reg_date -->
<!-- 		) VALUES ( -->
<!-- 		      #{pid}  -->
<!-- 			, #{boardid} -->
<!-- 			, #{title} -->
<!-- 			, #{contents} -->
<!-- 			, #{writer_uid} -->
<!-- 			, sysdate -->
<!-- 		) -->
<!-- 	</insert> -->
	
	<update id="update">
		update board set 
			  title=#{title}
			, contents=#{contents} 
		where boardid=#{boardid}
	</update>
	
	<delete id="delete">
		delete from board 
		where boardid=#{boardid}
	</delete>
	
	<select id="boardTop" resultType="BoardDTO">
		<![CDATA[
			select 
				rownum, sub.*  
			from (
				select 
					* 
				from board 
				order by board.boardid desc
			) sub 
			where rownum <=5
		]]>
	</select>
	
	<update id="boardCount">
		update board set 
			view_count = view_count + 1 
		where boardId = #{boardId}
	</update>
	
	<delete id="deleteAll" >
		delete from board 
		where boardid in
		<foreach item="boardid" collection="list"  open="("  separator="," close=")"> 
			#{boardid}		
		</foreach> 
	</delete>
	
	<select id="getBoardList2" resultType="BoardDTO">
		select * from (
			select 
				  level, pid, boardid, step, title, email, reg_date, view_count
			from board 
			where delete_yn = 'N' 
			<if test="boardid != 0">
				<![CDATA[
				and boardid > #{boardid}
				]]>
			</if>
			start with pid=0
			CONNECT BY PRIOR boardid = pid
			order SIBLINGS by boardid desc  
		) A 
		<![CDATA[
		where rownum <= 10
		]]>
	</select>
	
<!-- 	<select id="getboardListBoforeN"> -->
<!-- 		 select * from ( -->
<!-- 		     select * from board -->
<!-- 			 <![CDATA[ -->
<!-- 		     where boardid < #{boardid}  -->
<!-- 			 ]]> -->
<!-- 		     order by boardid desc -->
<!-- 		 ) A -->
<!-- 		 <![CDATA[ -->
<!-- 		 where rownum <= N		 -->
<!-- 		 ]]> -->
<!-- 	</select> -->
	
</mapper>